/* tslint:disable */
/* eslint-disable */
/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: bbfb64a2ef9111c6610a823da800b0335587831d
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ValContentV1ContentDto } from '../model';
/**
 * ValContentV1Api - axios parameter creator
 * @export
 */
export const ValContentV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get content optionally filtered by locale
         * @summary Get content optionally filtered by locale
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valContentV1GetContent: async (locale?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/val/content/v1/contents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValContentV1Api - functional programming interface
 * @export
 */
export const ValContentV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValContentV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get content optionally filtered by locale
         * @summary Get content optionally filtered by locale
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valContentV1GetContent(locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValContentV1ContentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valContentV1GetContent(locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValContentV1Api - factory interface
 * @export
 */
export const ValContentV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValContentV1ApiFp(configuration)
    return {
        /**
         * Get content optionally filtered by locale
         * @summary Get content optionally filtered by locale
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valContentV1GetContent(locale?: string, options?: any): AxiosPromise<ValContentV1ContentDto> {
            return localVarFp.valContentV1GetContent(locale, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValContentV1Api - interface
 * @export
 * @interface ValContentV1Api
 */
export interface ValContentV1ApiInterface {
    /**
     * Get content optionally filtered by locale
     * @summary Get content optionally filtered by locale
     * @param {string} [locale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValContentV1ApiInterface
     */
    valContentV1GetContent(locale?: string, options?: any): AxiosPromise<ValContentV1ContentDto>;

}

/**
 * ValContentV1Api - object-oriented interface
 * @export
 * @class ValContentV1Api
 * @extends {BaseAPI}
 */
export class ValContentV1Api extends BaseAPI implements ValContentV1ApiInterface {
    /**
     * Get content optionally filtered by locale
     * @summary Get content optionally filtered by locale
     * @param {string} [locale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValContentV1Api
     */
    public valContentV1GetContent(locale?: string, options?: any) {
        return ValContentV1ApiFp(this.configuration).valContentV1GetContent(locale, options).then((request) => request(this.axios, this.basePath));
    }
}
