/* tslint:disable */
/* eslint-disable */
/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: bbfb64a2ef9111c6610a823da800b0335587831d
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ValMatchV1MatchDto } from '../model';
// @ts-ignore
import { ValMatchV1MatchlistDto } from '../model';
// @ts-ignore
import { ValMatchV1RecentMatchesDto } from '../model';
/**
 * ValMatchV1Api - axios parameter creator
 * @export
 */
export const ValMatchV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get match by id
         * @summary Get match by id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valMatchV1GetMatch: async (matchId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('valMatchV1GetMatch', 'matchId', matchId)
            const localVarPath = `/val/match/v1/matches/{matchId}`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get matchlist for games played by puuid
         * @summary Get matchlist for games played by puuid
         * @param {string} puuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valMatchV1GetMatchlist: async (puuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'puuid' is not null or undefined
            assertParamExists('valMatchV1GetMatchlist', 'puuid', puuid)
            const localVarPath = `/val/match/v1/matchlists/by-puuid/{puuid}`
                .replace(`{${"puuid"}}`, encodeURIComponent(String(puuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent matches ## Implementation Notes Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
         * @summary Get recent matches
         * @param {'competitive' | 'unrated' | 'spikerush' | 'tournamentmode'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valMatchV1GetRecent: async (queue: 'competitive' | 'unrated' | 'spikerush' | 'tournamentmode', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queue' is not null or undefined
            assertParamExists('valMatchV1GetRecent', 'queue', queue)
            const localVarPath = `/val/match/v1/recent-matches/by-queue/{queue}`
                .replace(`{${"queue"}}`, encodeURIComponent(String(queue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValMatchV1Api - functional programming interface
 * @export
 */
export const ValMatchV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValMatchV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get match by id
         * @summary Get match by id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valMatchV1GetMatch(matchId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValMatchV1MatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valMatchV1GetMatch(matchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get matchlist for games played by puuid
         * @summary Get matchlist for games played by puuid
         * @param {string} puuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valMatchV1GetMatchlist(puuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValMatchV1MatchlistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valMatchV1GetMatchlist(puuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get recent matches ## Implementation Notes Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
         * @summary Get recent matches
         * @param {'competitive' | 'unrated' | 'spikerush' | 'tournamentmode'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valMatchV1GetRecent(queue: 'competitive' | 'unrated' | 'spikerush' | 'tournamentmode', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValMatchV1RecentMatchesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valMatchV1GetRecent(queue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValMatchV1Api - factory interface
 * @export
 */
export const ValMatchV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValMatchV1ApiFp(configuration)
    return {
        /**
         * Get match by id
         * @summary Get match by id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valMatchV1GetMatch(matchId: string, options?: any): AxiosPromise<ValMatchV1MatchDto> {
            return localVarFp.valMatchV1GetMatch(matchId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get matchlist for games played by puuid
         * @summary Get matchlist for games played by puuid
         * @param {string} puuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valMatchV1GetMatchlist(puuid: string, options?: any): AxiosPromise<ValMatchV1MatchlistDto> {
            return localVarFp.valMatchV1GetMatchlist(puuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent matches ## Implementation Notes Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
         * @summary Get recent matches
         * @param {'competitive' | 'unrated' | 'spikerush' | 'tournamentmode'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valMatchV1GetRecent(queue: 'competitive' | 'unrated' | 'spikerush' | 'tournamentmode', options?: any): AxiosPromise<ValMatchV1RecentMatchesDto> {
            return localVarFp.valMatchV1GetRecent(queue, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValMatchV1Api - interface
 * @export
 * @interface ValMatchV1Api
 */
export interface ValMatchV1ApiInterface {
    /**
     * Get match by id
     * @summary Get match by id
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValMatchV1ApiInterface
     */
    valMatchV1GetMatch(matchId: string, options?: any): AxiosPromise<ValMatchV1MatchDto>;

    /**
     * Get matchlist for games played by puuid
     * @summary Get matchlist for games played by puuid
     * @param {string} puuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValMatchV1ApiInterface
     */
    valMatchV1GetMatchlist(puuid: string, options?: any): AxiosPromise<ValMatchV1MatchlistDto>;

    /**
     * Get recent matches ## Implementation Notes Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
     * @summary Get recent matches
     * @param {'competitive' | 'unrated' | 'spikerush' | 'tournamentmode'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValMatchV1ApiInterface
     */
    valMatchV1GetRecent(queue: 'competitive' | 'unrated' | 'spikerush' | 'tournamentmode', options?: any): AxiosPromise<ValMatchV1RecentMatchesDto>;

}

/**
 * ValMatchV1Api - object-oriented interface
 * @export
 * @class ValMatchV1Api
 * @extends {BaseAPI}
 */
export class ValMatchV1Api extends BaseAPI implements ValMatchV1ApiInterface {
    /**
     * Get match by id
     * @summary Get match by id
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValMatchV1Api
     */
    public valMatchV1GetMatch(matchId: string, options?: any) {
        return ValMatchV1ApiFp(this.configuration).valMatchV1GetMatch(matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get matchlist for games played by puuid
     * @summary Get matchlist for games played by puuid
     * @param {string} puuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValMatchV1Api
     */
    public valMatchV1GetMatchlist(puuid: string, options?: any) {
        return ValMatchV1ApiFp(this.configuration).valMatchV1GetMatchlist(puuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recent matches ## Implementation Notes Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
     * @summary Get recent matches
     * @param {'competitive' | 'unrated' | 'spikerush' | 'tournamentmode'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValMatchV1Api
     */
    public valMatchV1GetRecent(queue: 'competitive' | 'unrated' | 'spikerush' | 'tournamentmode', options?: any) {
        return ValMatchV1ApiFp(this.configuration).valMatchV1GetRecent(queue, options).then((request) => request(this.axios, this.basePath));
    }
}
