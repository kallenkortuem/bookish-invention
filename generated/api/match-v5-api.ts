/* tslint:disable */
/* eslint-disable */
/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: f14f3a4b603d31d9d2090720bd518853c6a65bbb
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MatchV5MatchDto } from '../model';
// @ts-ignore
import { MatchV5MatchTimelineDto } from '../model';
/**
 * MatchV5Api - axios parameter creator
 * @export
 */
export const MatchV5ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a match by match id
         * @summary Get a match by match id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchV5GetMatch: async (matchId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('matchV5GetMatch', 'matchId', matchId)
            const localVarPath = `/lol/match/v5/matches/{matchId}`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of match ids by puuid
         * @summary Get a list of match ids by puuid
         * @param {string} puuid 
         * @param {number} [start] Defaults to 0. Start index.
         * @param {number} [count] Defaults to 20. Valid values: 0 to 100. Match id count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchV5GetMatchIdsByPUUID: async (puuid: string, start?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'puuid' is not null or undefined
            assertParamExists('matchV5GetMatchIdsByPUUID', 'puuid', puuid)
            const localVarPath = `/lol/match/v5/matches/by-puuid/{puuid}/ids`
                .replace(`{${"puuid"}}`, encodeURIComponent(String(puuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a match timeline by match id
         * @summary Get a match timeline by match id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchV5GetTimeline: async (matchId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('matchV5GetTimeline', 'matchId', matchId)
            const localVarPath = `/lol/match/v5/matches/{matchId}/timeline`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchV5Api - functional programming interface
 * @export
 */
export const MatchV5ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchV5ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a match by match id
         * @summary Get a match by match id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchV5GetMatch(matchId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchV5MatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchV5GetMatch(matchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of match ids by puuid
         * @summary Get a list of match ids by puuid
         * @param {string} puuid 
         * @param {number} [start] Defaults to 0. Start index.
         * @param {number} [count] Defaults to 20. Valid values: 0 to 100. Match id count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchV5GetMatchIdsByPUUID(puuid: string, start?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchV5GetMatchIdsByPUUID(puuid, start, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a match timeline by match id
         * @summary Get a match timeline by match id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchV5GetTimeline(matchId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchV5MatchTimelineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchV5GetTimeline(matchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MatchV5Api - factory interface
 * @export
 */
export const MatchV5ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchV5ApiFp(configuration)
    return {
        /**
         * Get a match by match id
         * @summary Get a match by match id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchV5GetMatch(matchId: string, options?: any): AxiosPromise<MatchV5MatchDto> {
            return localVarFp.matchV5GetMatch(matchId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of match ids by puuid
         * @summary Get a list of match ids by puuid
         * @param {string} puuid 
         * @param {number} [start] Defaults to 0. Start index.
         * @param {number} [count] Defaults to 20. Valid values: 0 to 100. Match id count.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchV5GetMatchIdsByPUUID(puuid: string, start?: number, count?: number, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.matchV5GetMatchIdsByPUUID(puuid, start, count, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a match timeline by match id
         * @summary Get a match timeline by match id
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchV5GetTimeline(matchId: string, options?: any): AxiosPromise<MatchV5MatchTimelineDto> {
            return localVarFp.matchV5GetTimeline(matchId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchV5Api - interface
 * @export
 * @interface MatchV5Api
 */
export interface MatchV5ApiInterface {
    /**
     * Get a match by match id
     * @summary Get a match by match id
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchV5ApiInterface
     */
    matchV5GetMatch(matchId: string, options?: any): AxiosPromise<MatchV5MatchDto>;

    /**
     * Get a list of match ids by puuid
     * @summary Get a list of match ids by puuid
     * @param {string} puuid 
     * @param {number} [start] Defaults to 0. Start index.
     * @param {number} [count] Defaults to 20. Valid values: 0 to 100. Match id count.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchV5ApiInterface
     */
    matchV5GetMatchIdsByPUUID(puuid: string, start?: number, count?: number, options?: any): AxiosPromise<Array<string>>;

    /**
     * Get a match timeline by match id
     * @summary Get a match timeline by match id
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchV5ApiInterface
     */
    matchV5GetTimeline(matchId: string, options?: any): AxiosPromise<MatchV5MatchTimelineDto>;

}

/**
 * MatchV5Api - object-oriented interface
 * @export
 * @class MatchV5Api
 * @extends {BaseAPI}
 */
export class MatchV5Api extends BaseAPI implements MatchV5ApiInterface {
    /**
     * Get a match by match id
     * @summary Get a match by match id
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchV5Api
     */
    public matchV5GetMatch(matchId: string, options?: any) {
        return MatchV5ApiFp(this.configuration).matchV5GetMatch(matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of match ids by puuid
     * @summary Get a list of match ids by puuid
     * @param {string} puuid 
     * @param {number} [start] Defaults to 0. Start index.
     * @param {number} [count] Defaults to 20. Valid values: 0 to 100. Match id count.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchV5Api
     */
    public matchV5GetMatchIdsByPUUID(puuid: string, start?: number, count?: number, options?: any) {
        return MatchV5ApiFp(this.configuration).matchV5GetMatchIdsByPUUID(puuid, start, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a match timeline by match id
     * @summary Get a match timeline by match id
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchV5Api
     */
    public matchV5GetTimeline(matchId: string, options?: any) {
        return MatchV5ApiFp(this.configuration).matchV5GetTimeline(matchId, options).then((request) => request(this.axios, this.basePath));
    }
}
