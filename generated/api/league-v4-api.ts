/* tslint:disable */
/* eslint-disable */
/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: bbfb64a2ef9111c6610a823da800b0335587831d
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LeagueV4LeagueEntryDTO } from '../model';
// @ts-ignore
import { LeagueV4LeagueListDTO } from '../model';
/**
 * LeagueV4Api - axios parameter creator
 * @export
 */
export const LeagueV4ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the challenger league for given queue.
         * @summary Get the challenger league for given queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetChallengerLeague: async (queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queue' is not null or undefined
            assertParamExists('leagueV4GetChallengerLeague', 'queue', queue)
            const localVarPath = `/lol/league/v4/challengerleagues/by-queue/{queue}`
                .replace(`{${"queue"}}`, encodeURIComponent(String(queue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the grandmaster league of a specific queue.
         * @summary Get the grandmaster league of a specific queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetGrandmasterLeague: async (queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queue' is not null or undefined
            assertParamExists('leagueV4GetGrandmasterLeague', 'queue', queue)
            const localVarPath = `/lol/league/v4/grandmasterleagues/by-queue/{queue}`
                .replace(`{${"queue"}}`, encodeURIComponent(String(queue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get league with given ID, including inactive entries.
         * @summary Get league with given ID, including inactive entries.
         * @param {string} leagueId The UUID of the league.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetLeagueById: async (leagueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'leagueId' is not null or undefined
            assertParamExists('leagueV4GetLeagueById', 'leagueId', leagueId)
            const localVarPath = `/lol/league/v4/leagues/{leagueId}`
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the league entries.
         * @summary Get all the league entries.
         * @param {'I' | 'II' | 'III' | 'IV'} division 
         * @param {'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON'} tier 
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue Note that the queue value must be a valid ranked queue.
         * @param {number} [page] Defaults to 1. Starts with page 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetLeagueEntries: async (division: 'I' | 'II' | 'III' | 'IV', tier: 'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON', queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'division' is not null or undefined
            assertParamExists('leagueV4GetLeagueEntries', 'division', division)
            // verify required parameter 'tier' is not null or undefined
            assertParamExists('leagueV4GetLeagueEntries', 'tier', tier)
            // verify required parameter 'queue' is not null or undefined
            assertParamExists('leagueV4GetLeagueEntries', 'queue', queue)
            const localVarPath = `/lol/league/v4/entries/{queue}/{tier}/{division}`
                .replace(`{${"division"}}`, encodeURIComponent(String(division)))
                .replace(`{${"tier"}}`, encodeURIComponent(String(tier)))
                .replace(`{${"queue"}}`, encodeURIComponent(String(queue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get league entries in all queues for a given summoner ID.
         * @summary Get league entries in all queues for a given summoner ID.
         * @param {string} encryptedSummonerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetLeagueEntriesForSummoner: async (encryptedSummonerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'encryptedSummonerId' is not null or undefined
            assertParamExists('leagueV4GetLeagueEntriesForSummoner', 'encryptedSummonerId', encryptedSummonerId)
            const localVarPath = `/lol/league/v4/entries/by-summoner/{encryptedSummonerId}`
                .replace(`{${"encryptedSummonerId"}}`, encodeURIComponent(String(encryptedSummonerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the master league for given queue.
         * @summary Get the master league for given queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetMasterLeague: async (queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queue' is not null or undefined
            assertParamExists('leagueV4GetMasterLeague', 'queue', queue)
            const localVarPath = `/lol/league/v4/masterleagues/by-queue/{queue}`
                .replace(`{${"queue"}}`, encodeURIComponent(String(queue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeagueV4Api - functional programming interface
 * @export
 */
export const LeagueV4ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeagueV4ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the challenger league for given queue.
         * @summary Get the challenger league for given queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueV4GetChallengerLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeagueV4LeagueListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueV4GetChallengerLeague(queue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the grandmaster league of a specific queue.
         * @summary Get the grandmaster league of a specific queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueV4GetGrandmasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeagueV4LeagueListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueV4GetGrandmasterLeague(queue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get league with given ID, including inactive entries.
         * @summary Get league with given ID, including inactive entries.
         * @param {string} leagueId The UUID of the league.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueV4GetLeagueById(leagueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeagueV4LeagueListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueV4GetLeagueById(leagueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the league entries.
         * @summary Get all the league entries.
         * @param {'I' | 'II' | 'III' | 'IV'} division 
         * @param {'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON'} tier 
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue Note that the queue value must be a valid ranked queue.
         * @param {number} [page] Defaults to 1. Starts with page 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueV4GetLeagueEntries(division: 'I' | 'II' | 'III' | 'IV', tier: 'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON', queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LeagueV4LeagueEntryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueV4GetLeagueEntries(division, tier, queue, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get league entries in all queues for a given summoner ID.
         * @summary Get league entries in all queues for a given summoner ID.
         * @param {string} encryptedSummonerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueV4GetLeagueEntriesForSummoner(encryptedSummonerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LeagueV4LeagueEntryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueV4GetLeagueEntriesForSummoner(encryptedSummonerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the master league for given queue.
         * @summary Get the master league for given queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueV4GetMasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeagueV4LeagueListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueV4GetMasterLeague(queue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeagueV4Api - factory interface
 * @export
 */
export const LeagueV4ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeagueV4ApiFp(configuration)
    return {
        /**
         * Get the challenger league for given queue.
         * @summary Get the challenger league for given queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetChallengerLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): AxiosPromise<LeagueV4LeagueListDTO> {
            return localVarFp.leagueV4GetChallengerLeague(queue, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the grandmaster league of a specific queue.
         * @summary Get the grandmaster league of a specific queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetGrandmasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): AxiosPromise<LeagueV4LeagueListDTO> {
            return localVarFp.leagueV4GetGrandmasterLeague(queue, options).then((request) => request(axios, basePath));
        },
        /**
         * Get league with given ID, including inactive entries.
         * @summary Get league with given ID, including inactive entries.
         * @param {string} leagueId The UUID of the league.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetLeagueById(leagueId: string, options?: any): AxiosPromise<LeagueV4LeagueListDTO> {
            return localVarFp.leagueV4GetLeagueById(leagueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the league entries.
         * @summary Get all the league entries.
         * @param {'I' | 'II' | 'III' | 'IV'} division 
         * @param {'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON'} tier 
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue Note that the queue value must be a valid ranked queue.
         * @param {number} [page] Defaults to 1. Starts with page 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetLeagueEntries(division: 'I' | 'II' | 'III' | 'IV', tier: 'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON', queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', page?: number, options?: any): AxiosPromise<Array<LeagueV4LeagueEntryDTO>> {
            return localVarFp.leagueV4GetLeagueEntries(division, tier, queue, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Get league entries in all queues for a given summoner ID.
         * @summary Get league entries in all queues for a given summoner ID.
         * @param {string} encryptedSummonerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetLeagueEntriesForSummoner(encryptedSummonerId: string, options?: any): AxiosPromise<Array<LeagueV4LeagueEntryDTO>> {
            return localVarFp.leagueV4GetLeagueEntriesForSummoner(encryptedSummonerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the master league for given queue.
         * @summary Get the master league for given queue.
         * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueV4GetMasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): AxiosPromise<LeagueV4LeagueListDTO> {
            return localVarFp.leagueV4GetMasterLeague(queue, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeagueV4Api - interface
 * @export
 * @interface LeagueV4Api
 */
export interface LeagueV4ApiInterface {
    /**
     * Get the challenger league for given queue.
     * @summary Get the challenger league for given queue.
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4ApiInterface
     */
    leagueV4GetChallengerLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): AxiosPromise<LeagueV4LeagueListDTO>;

    /**
     * Get the grandmaster league of a specific queue.
     * @summary Get the grandmaster league of a specific queue.
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4ApiInterface
     */
    leagueV4GetGrandmasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): AxiosPromise<LeagueV4LeagueListDTO>;

    /**
     * Get league with given ID, including inactive entries.
     * @summary Get league with given ID, including inactive entries.
     * @param {string} leagueId The UUID of the league.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4ApiInterface
     */
    leagueV4GetLeagueById(leagueId: string, options?: any): AxiosPromise<LeagueV4LeagueListDTO>;

    /**
     * Get all the league entries.
     * @summary Get all the league entries.
     * @param {'I' | 'II' | 'III' | 'IV'} division 
     * @param {'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON'} tier 
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue Note that the queue value must be a valid ranked queue.
     * @param {number} [page] Defaults to 1. Starts with page 1.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4ApiInterface
     */
    leagueV4GetLeagueEntries(division: 'I' | 'II' | 'III' | 'IV', tier: 'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON', queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', page?: number, options?: any): AxiosPromise<Array<LeagueV4LeagueEntryDTO>>;

    /**
     * Get league entries in all queues for a given summoner ID.
     * @summary Get league entries in all queues for a given summoner ID.
     * @param {string} encryptedSummonerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4ApiInterface
     */
    leagueV4GetLeagueEntriesForSummoner(encryptedSummonerId: string, options?: any): AxiosPromise<Array<LeagueV4LeagueEntryDTO>>;

    /**
     * Get the master league for given queue.
     * @summary Get the master league for given queue.
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4ApiInterface
     */
    leagueV4GetMasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any): AxiosPromise<LeagueV4LeagueListDTO>;

}

/**
 * LeagueV4Api - object-oriented interface
 * @export
 * @class LeagueV4Api
 * @extends {BaseAPI}
 */
export class LeagueV4Api extends BaseAPI implements LeagueV4ApiInterface {
    /**
     * Get the challenger league for given queue.
     * @summary Get the challenger league for given queue.
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4Api
     */
    public leagueV4GetChallengerLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any) {
        return LeagueV4ApiFp(this.configuration).leagueV4GetChallengerLeague(queue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the grandmaster league of a specific queue.
     * @summary Get the grandmaster league of a specific queue.
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4Api
     */
    public leagueV4GetGrandmasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any) {
        return LeagueV4ApiFp(this.configuration).leagueV4GetGrandmasterLeague(queue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get league with given ID, including inactive entries.
     * @summary Get league with given ID, including inactive entries.
     * @param {string} leagueId The UUID of the league.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4Api
     */
    public leagueV4GetLeagueById(leagueId: string, options?: any) {
        return LeagueV4ApiFp(this.configuration).leagueV4GetLeagueById(leagueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the league entries.
     * @summary Get all the league entries.
     * @param {'I' | 'II' | 'III' | 'IV'} division 
     * @param {'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON'} tier 
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue Note that the queue value must be a valid ranked queue.
     * @param {number} [page] Defaults to 1. Starts with page 1.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4Api
     */
    public leagueV4GetLeagueEntries(division: 'I' | 'II' | 'III' | 'IV', tier: 'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON', queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', page?: number, options?: any) {
        return LeagueV4ApiFp(this.configuration).leagueV4GetLeagueEntries(division, tier, queue, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get league entries in all queues for a given summoner ID.
     * @summary Get league entries in all queues for a given summoner ID.
     * @param {string} encryptedSummonerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4Api
     */
    public leagueV4GetLeagueEntriesForSummoner(encryptedSummonerId: string, options?: any) {
        return LeagueV4ApiFp(this.configuration).leagueV4GetLeagueEntriesForSummoner(encryptedSummonerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the master league for given queue.
     * @summary Get the master league for given queue.
     * @param {'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT'} queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueV4Api
     */
    public leagueV4GetMasterLeague(queue: 'RANKED_SOLO_5x5' | 'RANKED_FLEX_SR' | 'RANKED_FLEX_TT', options?: any) {
        return LeagueV4ApiFp(this.configuration).leagueV4GetMasterLeague(queue, options).then((request) => request(this.axios, this.basePath));
    }
}
