/* tslint:disable */
/* eslint-disable */
/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: f14f3a4b603d31d9d2090720bd518853c6a65bbb
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClashV1PlayerDto } from '../model';
// @ts-ignore
import { ClashV1TeamDto } from '../model';
// @ts-ignore
import { ClashV1TournamentDto } from '../model';
/**
 * ClashV1Api - axios parameter creator
 * @export
 */
export const ClashV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get players by summoner ID. ## Implementation Notes This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
         * @summary Get players by summoner ID.
         * @param {string} summonerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetPlayersBySummoner: async (summonerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'summonerId' is not null or undefined
            assertParamExists('clashV1GetPlayersBySummoner', 'summonerId', summonerId)
            const localVarPath = `/lol/clash/v1/players/by-summoner/{summonerId}`
                .replace(`{${"summonerId"}}`, encodeURIComponent(String(summonerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get team by ID.
         * @summary Get team by ID.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTeamById: async (teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('clashV1GetTeamById', 'teamId', teamId)
            const localVarPath = `/lol/clash/v1/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tournament by ID.
         * @summary Get tournament by ID.
         * @param {number} tournamentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTournamentById: async (tournamentId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentId' is not null or undefined
            assertParamExists('clashV1GetTournamentById', 'tournamentId', tournamentId)
            const localVarPath = `/lol/clash/v1/tournaments/{tournamentId}`
                .replace(`{${"tournamentId"}}`, encodeURIComponent(String(tournamentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tournament by team ID.
         * @summary Get tournament by team ID.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTournamentByTeam: async (teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('clashV1GetTournamentByTeam', 'teamId', teamId)
            const localVarPath = `/lol/clash/v1/tournaments/by-team/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all active or upcoming tournaments.
         * @summary Get all active or upcoming tournaments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTournaments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/lol/clash/v1/tournaments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Riot-Token required
            await setApiKeyToObject(localVarHeaderParameter, "X-Riot-Token", configuration)

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClashV1Api - functional programming interface
 * @export
 */
export const ClashV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClashV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get players by summoner ID. ## Implementation Notes This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
         * @summary Get players by summoner ID.
         * @param {string} summonerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clashV1GetPlayersBySummoner(summonerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClashV1PlayerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clashV1GetPlayersBySummoner(summonerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get team by ID.
         * @summary Get team by ID.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clashV1GetTeamById(teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClashV1TeamDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clashV1GetTeamById(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tournament by ID.
         * @summary Get tournament by ID.
         * @param {number} tournamentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clashV1GetTournamentById(tournamentId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClashV1TournamentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clashV1GetTournamentById(tournamentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tournament by team ID.
         * @summary Get tournament by team ID.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clashV1GetTournamentByTeam(teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClashV1TournamentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clashV1GetTournamentByTeam(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all active or upcoming tournaments.
         * @summary Get all active or upcoming tournaments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clashV1GetTournaments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClashV1TournamentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clashV1GetTournaments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClashV1Api - factory interface
 * @export
 */
export const ClashV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClashV1ApiFp(configuration)
    return {
        /**
         * Get players by summoner ID. ## Implementation Notes This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
         * @summary Get players by summoner ID.
         * @param {string} summonerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetPlayersBySummoner(summonerId: string, options?: any): AxiosPromise<Array<ClashV1PlayerDto>> {
            return localVarFp.clashV1GetPlayersBySummoner(summonerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team by ID.
         * @summary Get team by ID.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTeamById(teamId: string, options?: any): AxiosPromise<ClashV1TeamDto> {
            return localVarFp.clashV1GetTeamById(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tournament by ID.
         * @summary Get tournament by ID.
         * @param {number} tournamentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTournamentById(tournamentId: number, options?: any): AxiosPromise<ClashV1TournamentDto> {
            return localVarFp.clashV1GetTournamentById(tournamentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tournament by team ID.
         * @summary Get tournament by team ID.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTournamentByTeam(teamId: string, options?: any): AxiosPromise<ClashV1TournamentDto> {
            return localVarFp.clashV1GetTournamentByTeam(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all active or upcoming tournaments.
         * @summary Get all active or upcoming tournaments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clashV1GetTournaments(options?: any): AxiosPromise<Array<ClashV1TournamentDto>> {
            return localVarFp.clashV1GetTournaments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClashV1Api - interface
 * @export
 * @interface ClashV1Api
 */
export interface ClashV1ApiInterface {
    /**
     * Get players by summoner ID. ## Implementation Notes This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
     * @summary Get players by summoner ID.
     * @param {string} summonerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1ApiInterface
     */
    clashV1GetPlayersBySummoner(summonerId: string, options?: any): AxiosPromise<Array<ClashV1PlayerDto>>;

    /**
     * Get team by ID.
     * @summary Get team by ID.
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1ApiInterface
     */
    clashV1GetTeamById(teamId: string, options?: any): AxiosPromise<ClashV1TeamDto>;

    /**
     * Get tournament by ID.
     * @summary Get tournament by ID.
     * @param {number} tournamentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1ApiInterface
     */
    clashV1GetTournamentById(tournamentId: number, options?: any): AxiosPromise<ClashV1TournamentDto>;

    /**
     * Get tournament by team ID.
     * @summary Get tournament by team ID.
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1ApiInterface
     */
    clashV1GetTournamentByTeam(teamId: string, options?: any): AxiosPromise<ClashV1TournamentDto>;

    /**
     * Get all active or upcoming tournaments.
     * @summary Get all active or upcoming tournaments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1ApiInterface
     */
    clashV1GetTournaments(options?: any): AxiosPromise<Array<ClashV1TournamentDto>>;

}

/**
 * ClashV1Api - object-oriented interface
 * @export
 * @class ClashV1Api
 * @extends {BaseAPI}
 */
export class ClashV1Api extends BaseAPI implements ClashV1ApiInterface {
    /**
     * Get players by summoner ID. ## Implementation Notes This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
     * @summary Get players by summoner ID.
     * @param {string} summonerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1Api
     */
    public clashV1GetPlayersBySummoner(summonerId: string, options?: any) {
        return ClashV1ApiFp(this.configuration).clashV1GetPlayersBySummoner(summonerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get team by ID.
     * @summary Get team by ID.
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1Api
     */
    public clashV1GetTeamById(teamId: string, options?: any) {
        return ClashV1ApiFp(this.configuration).clashV1GetTeamById(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tournament by ID.
     * @summary Get tournament by ID.
     * @param {number} tournamentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1Api
     */
    public clashV1GetTournamentById(tournamentId: number, options?: any) {
        return ClashV1ApiFp(this.configuration).clashV1GetTournamentById(tournamentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tournament by team ID.
     * @summary Get tournament by team ID.
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1Api
     */
    public clashV1GetTournamentByTeam(teamId: string, options?: any) {
        return ClashV1ApiFp(this.configuration).clashV1GetTournamentByTeam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all active or upcoming tournaments.
     * @summary Get all active or upcoming tournaments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClashV1Api
     */
    public clashV1GetTournaments(options?: any) {
        return ClashV1ApiFp(this.configuration).clashV1GetTournaments(options).then((request) => request(this.axios, this.basePath));
    }
}
